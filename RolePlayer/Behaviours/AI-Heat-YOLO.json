{
	"behaviorVariables": [
{
			/* How much accuracy (0.0 - 1.0) is required to consider
	       an attack that will overheat */
			"k": "Float_AccuracyNeededForOverheatAttack",
			"v": {
				"type": "Float",
				"floatVal": 0.35
			}
		},
		{
			/* How much a location must be damaged before an overheat
	       attack will be considered, as a fraction from 0.0
	       (undamaged) to 1.0 (location destroyed) */
			"k": "Float_ExistingTargetDamageForOverheatAttack",
			"v": {
				"type": "Float",
				"floatVal": 0.1
			}
		},
		{
			/* How much heat is acceptable before being subject to "overheat" logic.
	       0: no heat
	       1: Heat level 1 (unused?)
	       2: Heat level 2
	       3: Max heat */
			"k": "Float_AcceptableHeatLevel",
			"v": {
				"type": "Float",
				"floatVal": 3
			}
		},
		{
			/* Influence Factor Weight to control the desire to be
	       inside water. */
			"k": "Float_PreferHigherHeatSinkLocationsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.75
			}
		},
		{
			/* Influence Factor Weight to control the desire to be
	       inside water WHEN SPRINTING. */
			"k": "Float_SprintPreferHigherHeatSinkLocationsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.95
			}
		},
		{
			/* Influence Factor Weight to control the desire to be
	       inside heat generating regions. */
			"k": "Float_PreferHigherHeatPerTurnLocationsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -1.3
			}
		},
		{
			/* Influence Factor Weight to control the desire to be
	       inside heat generating regions WHEN SPRINTING. */
			"k": "Float_SprintPreferHigherHeatPerTurnLocationsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -1.5
			}
		},
		{
			/* Fraction (0.0 - 1.0+) of a unit's heat generated in an
	       attack to consider when filtering out movement
	       destinations. */
			"k": "Float_HeatFracForHeatFilter",
			"v": {
				"type": "Float",
				"floatVal": 0.6
			}
		},
		{
			/* Fraction (0.0 - 1.0+) of a unit's damage generated in
	       an attack to consider when filtering out movement
	       destinations. */
			"k": "Float_DamageFracForHeatFilter",
			"v": {
				"type": "Float",
				"floatVal": 0.3
			}
		},
		{
			/* Distance (in meters) outside of which we consider
	       ourselves OK to stop and cool down. */
			"k": "Float_CoolDownRange",
			"v": {
				"type": "Float",
				"floatVal": 400.0
			}
		},
		]
}