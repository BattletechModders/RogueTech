{
	"behaviorVariables": [
	{
			/* Radius around waypoints that the lance must all be
	       within before proceeding to next waypoint. */
			"k": "Float_LancePatrolRadius",
			"v": {
				"type": "Float",
				"floatVal": 40
			}
		},
		{
			/* Distance beyond allies that a unit can run ahead while
	       following a route. */
			"k": "Float_LanceMoveRadius",
			"v": {
				"type": "Float",
				"floatVal": 80
			}
		},
		{
			/* Distance (in meters) that the AI wants to keep between
	       units.  Used by:
	       - PreferNoCloserThanPersonalSpaceToAlly Influence Factor
	       - Decrowding while following routes
	    */
			"k": "Float_PersonalSpaceRadius",
			"v": {
				"type": "Float",
				"floatVal": 200
			}
		},
		{
			/* How far (in meters) a lance will allow itself to spread
	       out when in non-interleaved mode. (TODO currently only
	       used for sprinting to combat.) */
			"k": "Float_NonInterleavedLanceSpreadDistance",
			"v": {
				"type": "Float",
				"floatVal": 620.0
			}
		},
		{
			/* How far (in meters) a lance will allow itself to spread
	       out when in interleaved mode. (TODO currently only used
	       for sprinting to combat.) */
			"k": "Float_InterleavedLanceSpreadDistance",
			"v": {
				"type": "Float",
				"floatVal": 600.0
			}
		},
		{
			/* Influence Factor to prefer this lance to surround hostile units.*/
			"k": "Float_PreferSurroundingHostileUnitsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.5
			}
		},
		{
			/* Influence Factor to prefer this lance to surround
	       hostile units WHEN SPRINTING.*/
			"k": "Float_SprintPreferSurroundingHostileUnitsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.5
			}
		},
		{
			/* Weight for an influence factor that seeks to stay
	       within a circular fence from the centerpoint of the
	       lance. Note - negative logic; this should use negative
	       numbers, as it's designed to discourage being outside
	       the radius and have no effect inside the fence. */
			"k": "Float_PreferStayInsideFenceNegativeLogicFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -3.0
			}
		},
		{
			/* Weight for an influence factor that seeks to stay
	       within a circular fence from the centerpoint of the
	       lance WHEN SPRINTING. Note - negative logic; this
	       should use negative numbers, as it's designed to
	       discourage being outside the radius and have no effect
	       inside the fence. */
			"k": "Float_SprintPreferStayInsideFenceNegativeLogicFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -1.0
			}
		},
		{
			/* Fence radius (in meters) for
	     * PreferStayInsideFenceFactor. */
			"k": "Float_FenceRadius",
			"v": {
				"type": "Float",
				"floatVal": 330.0
			}
		},
		{
			/* Multiplier applied when considering the value of a
	       downed mech when calculating the centerpoint of the
	       lance fence. 1.0 would be no special consideration, 2.0
	       would make a downed mech as important as two other
	       units. Values less than one would give the lance a
	       tendency to abandon their wounded. */
			"k": "Float_DownedMechFenceContributionMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 0.1
			}
		},
		{
			/* Influence Factor Weight to prefer locations close to
	       optimal distance to other allies. */
			"k": "Float_PreferOptimalDistanceToAllyFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.3
			}
		},
		{
			/* Influence Factor Weight to prefer locations close to
	       optimal distance to other allies WHEN SPRINTING. */
			"k": "Float_SprintPreferOptimalDistanceToAllyFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.2
			}
		},
		{
			/* Weight for how much to prefer to be exposed to enemy
	     * fire alone. Probably negative. */
			"k": "Float_AlonePreferenceWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.3
			}
		},
		{
			/* Weight for how much to prefer to be exposed to enemy
	     * fire alone WHEN SPRINTING. Probably negative. */
			"k": "Float_SprintAlonePreferenceWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.8
			}
		},
		{
			/* How long to tolerate being alone, in turns. */
			"k": "Int_AloneToleranceTurnCount",
			"v": {
				"type": "Int",
				"floatVal": 60
			}
		},
		{
			/* How long to cool down after being alone, in turns. */
			"k": "Int_AloneCoolDownTurnCount",
			"v": {
				"type": "Int",
				"floatVal": 30
			}
		},
		{
			/* When a buddy is exposed to enemy fire alone, apply this
	     * weight to locations that DO NOT have line of fire to
	     * hostiles. Probably negative. */
			"k": "Float_BuddyAloneFiringSolutionPreferenceWeight",
			"v": {
				"type": "Float",
				"floatVal": -0.8
			}
		},
		{
			/* When a buddy is exposed to enemy fire alone, apply this
	     * weight to locations that DO NOT have line of fire to
	     * hostiles WHEN SPRINTING. Probably negative. */
			"k": "Float_SprintBuddyAloneFiringSolutionPreferenceWeight",
			"v": {
				"type": "Float",
				"floatVal": -1.6
			}
		},
		{
			/* When a buddy is exposed to enemy fire alone, close the
	     * distance to the alone unit by applying this weight
	     * proportionately to locations radiating out from the
	     * alone unit (e.g. the alone unit's location would get
	     * 0.0, this unit's location would get 1.0 * this
	     * weight. Probably negative. */
			"k": "Float_BuddyAloneMoveNearbyPreferenceWeight",
			"v": {
				"type": "Float",
				"floatVal": -1.5
			}
		},
		{
			/* When a buddy is exposed to enemy fire alone, close the
	     * distance to the alone unit by applying this weight
	     * proportionately to locations radiating out from the
	     * alone unit (e.g. the alone unit's location would get
	     * 0.0, this unit's location would get 1.0 * this
	     * weight WHEN SPRINTING. Probably negative. */
			"k": "Float_SprintBuddyAloneMoveNearbyPreferenceWeight",
			"v": {
				"type": "Float",
				"floatVal": -2.8
			}
		},
	]
}	