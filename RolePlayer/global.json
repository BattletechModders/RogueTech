{
	"behaviorVariables": [
		{
			"k": "Float_SureFootingAbilityWalkBoost",
			"v": {
				"type": "Float",
				"floatVal": 0.4
			}
		},
		{
			/* How much accuracy (0.0 - 1.0) is required to consider
	       an attack that will overheat */
			"k": "Float_AccuracyNeededForOverheatAttack",
			"v": {
				"type": "Float",
				"floatVal": 0.75
			}
		},
		{
			/* How much a location must be damaged before an overheat
	       attack will be considered, as a fraction from 0.0
	       (undamaged) to 1.0 (location destroyed) */
			"k": "Float_ExistingTargetDamageForOverheatAttack",
			"v": {
				"type": "Float",
				"floatVal": 0.5
			}
		},
		{
			/* How much a location must be damaged before a DFA attack
	       will be considered , as a fraction from 0.0 (undamaged)
	       to 1.0 (location destroyed) */
			"k": "Float_ExistingTargetDamageForDFAAttack",
			"v": {
				"type": "Float",
				"floatVal": 0.3
			}
		},
		{
			/* Maximum leg damage allowed for DFA attack (above which
	       attacks will not be considered), as a fraction from 0.0
	       (undamaged) to 1.0 (location destroyed) */
			"k": "Float_OwnMaxLegDamageForDFAAttack",
			"v": {
				"type": "Float",
				"floatVal": 0.7
			}
		},
		{
			/* Radius around waypoints that the lance must all be
	       within before proceeding to next waypoint. */
			"k": "Float_LancePatrolRadius",
			"v": {
				"type": "Float",
				"floatVal": 70
			}
		},
		{
			/* Distance beyond allies that a unit can run ahead while
	       following a route. */
			"k": "Float_LanceMoveRadius",
			"v": {
				"type": "Float",
				"floatVal": 8
			}
		},
		{
			/* Whether the given route should loop. SET BY MAP
	       DATA. */
			"k": "Bool_PatrolShouldLoop",
			"v": {
				"type": "Bool",
				"boolVal": true
			}
		},
		{
			/* When attacking a priority target, do not attack the
	       priority targe if targeted within the recent target
	       threshold number of phases. */
			"k": "Int_RecentTargetThresholdPhases",
			"v": {
				"type": "Int",
				"intVal": 2
			}
		},
		{
			/* The "To Hit" threshold to use when attacking preferred
	     * targets */
			"k": "Float_PreferredTargetToHitThreshold",
			"v": {
				"type": "Float",
				"floatVal": 0.35
			}
		},
		{
			/* Radius (in meters) that the AI must get to a waypoint
	       when following a route before proceeding to the next
	       waypoint. */
			"k": "Float_RouteWaypointRadius",
			"v": {
				"type": "Float",
				"floatVal": 40
			}
		},
		{
			/* Distance (in meters) that the AI wants to keep between
	       units.  Used by:
	       - PreferNoCloserThanPersonalSpaceToAlly Influence Factor
	       - Decrowding while following routes
	    */
			"k": "Float_PersonalSpaceRadius",
			"v": {
				"type": "Float",
				"floatVal": 6
			}
		},
		{
			/* Should targeting this unit distract it from attacking a
	       priority target? */
			"k": "Bool_ProhibitTargetingPriorityTargetsAfterBeingTargeted",
			"v": {
				"type": "Bool",
				"boolVal": true
			}
		},
		{
			/* Percentage (0-100) of time to attack priority
	       targets. */
			"k": "Float_PriorityAttackPercentage",
			"v": {
				"type": "Float",
				"floatVal": 95
			}
		},
		{
			/* Percentage (0-100) of time to move towards priority
	       targets. */
			"k": "Float_PriorityMovePercentage",
			"v": {
				"type": "Float",
				"floatVal": 95
			}
		},
		{
			/* Influence Factor Weight for preferring moving less. */
			"k": "Float_PreferLowerMovementFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -1.0
			}
		},
		{
			/* Influence Factor Weight for preferring moving less WHEN
	       SPRINTING. */
			"k": "Float_SprintPreferLowerMovementFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -1.5
			}
		},
		{
			/* Influence Factor Weight for preferring higher
	       elevations. */
			"k": "Float_PreferHigherPositionFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.65
			}
		},
		{
			/* Influence Factor Weight for preferring higher
	       elevations WHEN SPRINTING. */
			"k": "Float_SprintPreferHigherPositionFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.85
			}
		},
		{
			/* Influence Factor Weight to maximize expected damage to
	       hostiles.
	       Hostile Factor: 1.0 / 0.5 / 0.25 based on threat
	    */
			"k": "Float_PreferHigherExpectedDamageToHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 1.8
			}
		},
		{
			/* Influence Factor Weight to maximize expected damage to
	       hostiles WHEN SPRINTING.
	       Hostile Factor: 1.0 / 0.5 / 0.25 based on threat
	    */
			"k": "Float_SprintPreferHigherExpectedDamageToHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.7
			}
		},
		{
			/* Influence Factor Weight to minimize expected damage
	       from hostiles. */
			"k": "Float_PreferLowerExpectedDamageFromHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.5
			}
		},
		{
			/* Influence Factor Weight to minimize expected damage
	       from hostiles WHEN SPRINTING. */
			"k": "Float_SprintPreferLowerExpectedDamageFromHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.8
			}
		},
		{
			/* Influence Factor Weight to prefer facing hostiles.
	       Hostile Factor: 1.0 / 0.5 / 0.25 based on threat
	    */
			"k": "Float_PreferFacingHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.75
			}
		},
		{
			/* Influence Factor Weight to prefer facing hostiles WHEN
	       SPRINTING.
	       Hostile Factor: 1.0 / 0.5 / 0.25 based on threat
	    */
			"k": "Float_SprintPreferFacingHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.25
			}
		},
		{
			/* Optimal distance to nearest ally. (See
	       PreferOptimalDistanceToAllyFactor.) */
			"k": "Float_OptimalAllyDistance",
			"v": {
				"type": "Float",
				"floatVal": 122.0
			}
		},
		{
			/* Influence Factor Weight to prefer locations close to
	       optimal distance to other allies. */
			"k": "Float_PreferOptimalDistanceToAllyFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.4
			}
		},
		{
			/* Influence Factor Weight to prefer locations close to
	       optimal distance to other allies WHEN SPRINTING. */
			"k": "Float_SprintPreferOptimalDistanceToAllyFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.4
			}
		},
		{
			/* How much heat is acceptable before being subject to "overheat" logic.
	       0: no heat
	       1: Heat level 1 (unused?)
	       2: Heat level 2
	       3: Max heat */
			"k": "Float_AcceptableHeatLevel",
			"v": {
				"type": "Float",
				"floatVal": 1.5
			}
		},
		{
			/* DEPRECATED */
			"k": "Float_ThreatBattleValueRoot",
			"v": {
				"type": "Float",
				"floatVal": 0.0
			}
		},
		{
			/* When considering different kinds of attacks, multiply
	       the shooting damage by this value to decide which
	       attack to use. */
			"k": "Float_ShootingDamageMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 1.7
			}
		},
		{
			/* When considering different kinds of attacks, multiply
	       the melee damage by this value to decide which attack
	       to use. */
			"k": "Float_MeleeDamageMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 0.3
			}
		},
		{
			/* When considering a melee attack against an unsteady
	       target, multiply the melee damage by this value to
	       decide which attack to use. This is in addition to the
	       base melee multiplier, above. */
			"k": "Float_MeleeVsUnsteadyTargetDamageMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 0.75
			}
		},
		{
			/* When considering different kinds of attacks, multiply
	       the DFA damage by this value to decide which attack to
	       use. */
			"k": "Float_DFADamageMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 1.4
			}
		},
		{
			/* Distance (in meters) outside of which we consider
	       ourselves OK to stop and cool down. */
			"k": "Float_CoolDownRange",
			"v": {
				"type": "Float",
				"floatVal": 300.0
			}
		},
		{
			/* Influence Factor Weight to control the desire to be
	       inside e.g. forests. */
			"k": "Float_PreferLessTargetableLocationFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 1.1
			}
		},
		{
			/* Influence Factor Weight to control the desire to be
	       inside e.g. forests WHEN SPRINTING. */
			"k": "Float_SprintPreferLessTargetableLocationFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 1.1
			}
		},
		{
			/* Influence Factor Weight to control the desire to be
	       inside water. */
			"k": "Float_PreferHigherHeatSinkLocationsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.7
			}
		},
		{
			/* Influence Factor Weight to control the desire to be
	       inside water WHEN SPRINTING. */
			"k": "Float_SprintPreferHigherHeatSinkLocationsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.9
			}
		},
		{
			/* Influence Factor Weight to control the desire to be
	       inside heat generating regions. */
			"k": "Float_PreferHigherHeatPerTurnLocationsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -1.6
			}
		},
		{
			/* Influence Factor Weight to control the desire to be
	       inside heat generating regions WHEN SPRINTING. */
			"k": "Float_SprintPreferHigherHeatPerTurnLocationsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -1.9
			}
		},
		{
			/* Influence Factor Weight to control the desire to be in
	       locations with movement bonus. */
			"k": "Float_PreferHigherMovementBonusLocationsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.45
			}
		},
		{
			/* Influence Factor Weight to control the desire to be in
	       locations with movement bonus WHEN SPRINTING. */
			"k": "Float_SprintPreferHigherMovementBonusLocationsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.75
			}
		},
		{
			/* Influence Factor Weight to control the desire to attack
	       a hostile's weak armor. */
			"k": "Float_PreferAttackingLowerArmorHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 1.5
			}
		},
		{
			/* Influence Factor Weight to control the desire to attack
	       a hostile's weak armor WHEN SPRINTING. */
			"k": "Float_SprintPreferAttackingLowerArmorHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.3
			}
		},
		{
			/* Ratio between expected damage and target hit points to
	       be used for "Vulnerable" threat sorting. */
			"k": "Float_VulnerableDamageRatioThreshold",
			"v": {
				"type": "Float",
				"floatVal": 0.5
			}
		},
		{
			/* Damage multiplier when measuring vulnerability of called
	       shot targets. */
			"k": "Float_CalledShotVulnerabilityMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 4.5
			}
		},
		{
			/* Ratio between hostile's expected damage and my hit points to
	       be used for "Threat" threat sorting. */
			"k": "Float_ThreatDamageRatioThreshold",
			"v": {
				"type": "Float",
				"floatVal": 0.4
			}
		},
		{
			/* How many phases to consider when looking for a melee
	       revenge target. */
			"k": "Int_MeleeRevengeWindowPhaseCount",
			"v": {
				"type": "Int",
				"intVal": 21
			}
		},
		{
			/* If a target is a melee revenge target, what additional
	       damage multiplier to apply. The total multiplier is
	       Float_MeleeDamageMultiplier +
	       FloatMeleeRevengeBonus. */
			"k": "Float_MeleeRevengeBonus",
			"v": {
				"type": "Float",
				"floatVal": 0.25
			}
		},
		{
			/* If a target is a melee revenge target, but the ratio of
	       its expected melee damage to my expected melee damage
	       is higher than this threshold, DO NOT MELEE! It'll all
	       end in tears! */
			"k": "Float_MeleeDamageRatioCap",
			"v": {
				"type": "Float",
				"floatVal": 1.1
			}
		},
		{
			/* If a unit takes this percentage damage or more in a
	       round, consider it "major damage", and react
	       accordingly (make a defensive move, maybe do a suicidal
	       charge?) */
			"k": "Float_MajorDamageRatio",
			"v": {
				"type": "Float",
				"floatVal": 5.0
			}
		},
		{
			/* When a weapon (e.g. flamer) generates heat, use this
	       ratio to convert heat to "virtual" damage for AI
	       calculations. */
			"k": "Float_HeatToDamageRatio",
			"v": {
				"type": "Float",
				"floatVal": 2.5
			}
		},
		{
			/* A weight for an influence factor to prefer to get
	       inside melee range. Negative values will encourage
	       units to get out of melee range. */
			"k": "Float_PreferInsideMeleeRangeFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -0.6
			}
		},
		{
			/* A weight for an influence factor to prefer to get
	       inside melee range WHEN SPRINTING. Negative values will
	       encourage units to get out of melee range. */
			"k": "Float_SprintPreferInsideMeleeRangeFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -0.9
			}
		},
		{
			/* The number of hostiles considered when evaluating
	       influence maps. */
			"k": "Int_HostileInfluenceCount",
			"v": {
				"type": "Int",
				"intVal": 6
			}
		},
		{
			/* The number of allies considered when evaluating
	       influence maps. */
			"k": "Int_AllyInfluenceCount",
			"v": {
				"type": "Int",
				"intVal": 3
			}
		},
		{
			/* If unsteady, the chance of just deciding to switch to
	       defensive. */
			"k": "Float_UnsteadyCausesDefensiveMovePercentage",
			"v": {
				"type": "Float",
				"floatVal": 10
			}
		},
		{
			/* If my move would not result in being able to fire,
	       should I rewrite that move as a sprint? */
			"k": "Bool_RewriteNonAttackMoves",
			"v": {
				"type": "Bool",
				"boolVal": true
			}
		},
		{
			/* Tag to control the desire to be near a tagged
	       target. */
			"k": "String_PreferProximityToTaggedTargetFactorTag",
			"v": {
				"type": "String",
				"stringVal": ""
			}
		},
		{
			/* How many degrees apart should I consider different
	       facings when choosing moves? */
			"k": "Float_AngularSelectionResolution",
			"v": {
				"type": "Float",
				"floatVal": 60.0
			}
		},
		{
			/* Use dynamic lance roles (brawler, flanker, spotter, sniper) */
			"k": "Bool_UseDynamicLanceRoles",
			"v": {
				"type": "Bool",
				"boolVal": false
			}
		},
		{
			/* How much of expected melee damage to add in again as
	       bonus damage when attacking evasive targets (0 - none,
	       1 - 100% bonus damage) */
			"k": "Float_MeleeBonusMultiplierWhenAttackingEvasiveTargets",
			"v": {
				"type": "Float",
				"floatVal": 0
			}
		},
		{
			/* How much of expected melee damage to add in again as
	       bonus damage when attacking braced targets (0 - none,
	       1 - 100% bonus damage) */
			"k": "Float_MeleeBonusMultiplierWhenAttackingBracedTargets",
			"v": {
				"type": "Float",
				"floatVal": 0.5
			}
		},
		{
			/* How many damage points one unit of unsteadiness
	       converts to when calculating virtual damage when
	       attacking unstable targets. */
			"k": "Float_UnsteadinessToVirtualDamageConversionRatio",
			"v": {
				"type": "Float",
				"floatVal": 1.70
			}
		},
		{
			/* Influence Factor Weight to control the desire to be
	       inside forests or other locations that grant guard. */
			"k": "Float_PreferLocationsThatGrantGuardFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.45
			}
		},
		{
			/* Influence Factor Weight to control the desire to be
	       inside forests or other locations that grant guard WHEN
	       SPRINTING. */
			"k": "Float_SprintPreferLocationsThatGrantGuardFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.6
			}
		},
		{
			/* Percentage (0-100) of best available move that will be
	       accepted for bulwark skill moves. */
			"k": "Float_BulwarkThresholdPercentage",
			"v": {
				"type": "Float",
				"floatVal": 5
			}
		},
		{
			/* Directory for influence map logs. Can be an absolute
	       directory (e.g. c:\tmp, but beware of OS dependencies)
	       or relative to BattleTech. */
			"k": "String_InfluenceMapCalculationLogDirectory",
			"v": {
				"type": "String",
				"stringVal": "AI_Logs"
			}
		},
		{
			/* Whether the AI will reserve or not. */
			"k": "Bool_ReserveEnabled",
			"v": {
				"type": "Bool",
				"boolVal": true
			}
		},
		{
			/* The base percentage chance (0-100) to reserve. */
			"k": "Float_ReserveBasePercentage",
			"v": {
				"type": "Float",
				"floatVal": 10
			}
		},
		{
			/* The "X" value in "for every X percent of hostile units
	       still to go this round, increase reserve chance by Y
	       percent." (0-100) */
			"k": "Float_ReserveHostilePercentageIncrementX",
			"v": {
				"type": "Float",
				"floatVal": 65.0
			}
		},
		{
			/* The "Y" value in "for every X percent of hostile units
	       still to go this round, increase reserve chance by Y
	       percent." (0-100) */
			"k": "Float_ReserveHostilePercentageIncrementY",
			"v": {
				"type": "Float",
				"floatVal": 22.5
			}
		},
		{
			/* Positive values mean to go that much AFTER the average
	       of the phases of remaining hostiles. */
			"k": "Float_ReserveHostileOffset",
			"v": {
				"type": "Float",
				"floatVal": 0.7
			}
		},
		{
			/* Threshold Percentage (100.0 equals 100%) of target hit
	       points before we start trying to multi-target. */
			"k": "Float_MultiTargetOverkillThreshold",
			"v": {
				"type": "Float",
				"floatVal": 90.0
			}
		},
		{
			/* Weight to prefer not being in locations that have
	       lethal amounts of expected damage */
			"k": "Float_PreferNotLethalPositionFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.75
			}
		},
		{
			/* Weight to prefer sprinting to locations that do not
	       have lethal amounts of expected damage */
			"k": "Float_SprintPreferNotLethalPositionFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 1.1
			}
		},
		{
			"k": "Float_OverkillThresholdLowForLethalPositionFactor",
			/* Percentage (100.0 equals 100%) of unit's hit points
	       below which damage is considered not lethal. Used by
	       PreferNotLethalPositionFactor. */
			"v": {
				"type": "Float",
				"floatVal": 150
			}
		},
		{
			"k": "Float_OverkillThresholdHighForLethalPositionFactor",
			/* Percentage (100.0 equals 100%) of unit's hit points
	       above which damage is considered lethal. Used by
	       PreferNotLethalPositionFactor. */
			"v": {
				"type": "Float",
				"floatVal": 350
			}
		},
		{
			"k": "Float_OverkillThresholdLowForRearArcPositionFactor",
			/* Percentage (100.0 equals 100%) of unit's hit points
	       below which damage is considered not lethal. Used by
	       PreferLethalDamageToRearArcFromHostileFactor. */
			"v": {
				"type": "Float",
				"floatVal": 40
			}
		},
		{
			"k": "Float_OverkillThresholdHighForRearArcPositionFactor",
			/* Percentage (100.0 equals 100%) of unit's hit points
	       above which damage is considered lethal. Used by
	       PreferLethalDamageToRearArcFromHostileFactor. */
			"v": {
				"type": "Float",
				"floatVal": 60
			}
		},
		{
			"k": "Float_OverkillFactorForReserve",
			/* If a hostile actor can do this percentage (100.0
	       equals 100%) of one of my unit's hit points, do
	       not reserve. */
			"v": {
				"type": "Float",
				"floatVal": 70.0
			}
		},
		{
			"k": "Float_CalledShotHeadBaseChance",
			/* Base chance for a called shot to the head. Not "out of"
	       100, or any fixed number, out of the total
	       applicable. */
			"v": {
				"type": "Float",
				"floatVal": 10.0
			}
		},
		{
			/* Base chance for a called shot to the center torso. Not
	       "out of" 100, or any fixed number, out of the total
	       applicable. */
			"k": "Float_CalledShotCenterTorsoBaseChance",
			"v": {
				"type": "Float",
				"floatVal": 15.0
			}
		},
		{
			/* Base chance for a called shot to other locations. Not
	       "out of" 100, or any fixed number, out of the total
	       applicable. */
			"k": "Float_CalledShotOtherBaseChance",
			"v": {
				"type": "Float",
				"floatVal": 5.0
			}
		},
		{
			/* Additional chance for a called shot per each point of
	       expected weapon damage. Not "out of" 100, or any fixed
	       number, out of the total applicable. */
			"k": "Float_CalledShotWeaponDamageChance",
			"v": {
				"type": "Float",
				"floatVal": 0.35
			}
		},
		{
			"k": "Float_CalledShotDamagedChanceMultiplier",
			/* Called shot location multiplier if that location is
	       damaged. */
			"v": {
				"type": "Float",
				"floatVal": 2.5
			}
		},
		{
			/* How long the AI is allowed to think, in seconds per
	       unit per activation. */
			"k": "Float_MaxThinkSeconds",
			"v": {
				"type": "Float",
				"floatVal": 60.0
			}
		},
		{
			/* Influence Factor Weight to prefer moving to locations
	       where hostile fire could kill us from behind. A
	       negative weight will invert this to avoid such
	       locations.

	       See Also: Float_DefensiveOverkillFactor, which
	       determines what "lethal" means. */
			"k": "Float_PreferLethalDamageToRearArcFromHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -3.0
			}
		},
		{
			/* Influence Factor Weight to prefer moving to locations
	       where hostile fire could kill us from behind WHEN
	       SPRINTING. A negative weight will invert this to avoid
	       such locations.

	       See Also: Float_DefensiveOverkillFactor, which
	       determines what "lethal" means. */
			"k": "Float_SprintPreferLethalDamageToRearArcFromHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -1.5
			}
		},
		{
			/* How far (in meters) a lance will allow itself to spread
	       out when in non-interleaved mode. (TODO currently only
	       used for sprinting to combat.) */
			"k": "Float_NonInterleavedLanceSpreadDistance",
			"v": {
				"type": "Float",
				"floatVal": 220.0
			}
		},
		{
			/* How far (in meters) a lance will allow itself to spread
	       out when in interleaved mode. (TODO currently only used
	       for sprinting to combat.) */
			"k": "Float_InterleavedLanceSpreadDistance",
			"v": {
				"type": "Float",
				"floatVal": 168.0
			}
		},
		{
			/* Appetitive Influence Factor Weight to approach
	       hostile's rear arc. */
			"k": "Float_AppetitivePreferApproachingRearArcOfHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 1.2
			}
		},
		{
			/* Appetitive Influence Factor Weight to approach
	       hostile's rear arc WHEN SPRINTING. */
			"k": "Float_SprintAppetitivePreferApproachingRearArcOfHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 1.4
			}
		},
		{
			/* Radius (in meters) to avoid sprinting within. */
			"k": "Float_SprintExclusionRadius",
			"v": {
				"type": "Float",
				"floatVal": 240.0
			}
		},
		{
			/* Influence Factor Weight to be inside SprintExclusionRadius. */
			"k": "Float_PreferInsideSprintExclusionRadiusHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.05
			}
		},
		{
			/* Influence Factor Weight to be inside
	       SprintExclusionRadius WHEN SPRINTING.  N.B. this should
	       have NEGATIVE weights to discourage sprinting close to
	       hostiles.
	    */
			"k": "Float_SprintPreferInsideSprintExclusionRadiusHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -10
			}
		},
		{
			/* Maximum distance (in meters) to hostile used for
	       SprintAppetitivePreferApproachingRearArcOfHostileFactor. */
			"k": "Float_AppetitiveBehindMaximumRadius",
			"v": {
				"type": "Float",
				"floatVal": 390.0
			}
		},
		{
			/* Appetitive Influence Factor Weight to approach ideal
	       weapon range to hostile. */
			"k": "Float_AppetitivePreferIdealWeaponRangeToHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 1.1
			}
		},
		{
			/* Appetitive Influence Factor Weight to approach ideal
	       weapon range to hostile WHEN SPRINTING. */
			"k": "Float_SprintAppetitivePreferIdealWeaponRangeToHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.1
			}
		},
		{
			/* DEPRECATED: Whether to use the new threat sorting that
	       incorporates target damage output, or the earlier
	       (Pre-July) version, which only looks at my ability to
	       do damage to the target, and then distance. (Update:
	       now always true.) */
			"k": "Bool_UseNewThreatDEPRECATED",
			"v": {
				"type": "Bool",
				"boolVal": true
			}
		},
		{
			/* Influence Factor to prefer this lance to surround hostile units.*/
			"k": "Float_PreferSurroundingHostileUnitsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.8
			}
		},
		{
			/* Influence Factor to prefer this lance to surround
	       hostile units WHEN SPRINTING.*/
			"k": "Float_SprintPreferSurroundingHostileUnitsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.8
			}
		},
		{
			/* Influence Factor to prefer not to be surrounded by hostile units.*/
			"k": "Float_PreferNotSurroundedByHostileUnitsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.15
			}
		},
		{
			/* Influence Factor to prefer not to be surrounded by
	       hostile units WHEN SPRINTING.*/
			"k": "Float_SprintPreferNotSurroundedByHostileUnitsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.5
			}
		},
		{
			/* Sprint Hysteresis Multiplier value, the value
	       multiplies the "sprint juice level" when a sprint move
	       happens. Values can be between 0.0 and 1.0, with larger
	       values (closer to 1.0) leaving more "sprint juice"
	       around for next turn. */
			"k": "Float_SprintHysteresisMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 1.00
			}
		},
		{
			/* Sprint Hysteresis Recovery Turns, the number of turns
	       not sprinting that it would take to recover from an
	       empty "sprint juice" reservoir. */
			"k": "Float_SprintHysteresisRecoveryTurns",
			"v": {
				"type": "Float",
				"floatVal": 1.0
			}
		},
		{
			/* The window (0.0 - 1.0) below the calculated ideal
	       damage differential that we thought that inspiration
	       might get us that we'll be willing to accept on the
	       first round of having inspire available. */
			"k": "Float_InspirationBaseDamageWindow",
			"v": {
				"type": "Float",
				"floatVal": 0.35
			}
		},
		{
			/* The increment window (0.0 - 1.0) below the calculated
	       ideal damage differential that we thought that
	       inspiration might get us that we'll be willing to
	       accept on successive rounds of having inspire
	       available. */
			"k": "Float_InspirationIncrementalDamageWindow",
			"v": {
				"type": "Float",
				"floatVal": 0.3
			}
		},
		{
			/* The minimum expected damage inspiration should get us
	       before we use inspiration. */
			"k": "Float_MinimumInspirationDamage",
			"v": {
				"type": "Float",
				"floatVal": 10.0
			}
		},
		{
			/* Weight for an influence factor that seeks to stay
	       within a circular fence from the centerpoint of the
	       lance. Note - negative logic; this should use negative
	       numbers, as it's designed to discourage being outside
	       the radius and have no effect inside the fence. */
			"k": "Float_PreferStayInsideFenceNegativeLogicFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -6.0
			}
		},
		{
			/* Weight for an influence factor that seeks to stay
	       within a circular fence from the centerpoint of the
	       lance WHEN SPRINTING. Note - negative logic; this
	       should use negative numbers, as it's designed to
	       discourage being outside the radius and have no effect
	       inside the fence. */
			"k": "Float_SprintPreferStayInsideFenceNegativeLogicFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -1.0
			}
		},
		{
			/* Fence radius (in meters) for
	     * PreferStayInsideFenceFactor. */
			"k": "Float_FenceRadius",
			"v": {
				"type": "Float",
				"floatVal": 120.0
			}
		},
		{
			/* Evasive "to hit" floor - if the to-hit is below this
	       percentage (0.0 - 100.0), only shoot a single
	       "conservative" shot. Note: ignored for attackers that
	       are not mechs. */
			"k": "Float_EvasiveToHitFloor",
			"v": {
				"type": "Float",
				"floatVal": 10.0
			}
		},
		{
			/*
	      Description: Number of points of damage that a sensor
	      locking turn needs to do over a straight up shooting
	      turn before deciding to sensor lock. Positive is a
	      shooting bias, negative is a sensor lock bias.*/
			"k": "Float_MinimumSensorLockQuality",
			"v": {
				"type": "Float",
				"floatVal": 25
			}
		},
		{
			/* Multiplier for how 'strong' each point of head armor is
	       when looking for weak armor. */
			"k": "Float_HeadArmorMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 100.0
			}
		},
		{
			/* Multiplier for how 'strong' each point of center torso
	       front armor is when looking for weak armor. */
			"k": "Float_CenterTorsoArmorMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 0.8
			}
		},
		{
			/* Multiplier for how 'strong' each point of center torso
	       rear armor is when looking for weak armor. */
			"k": "Float_CenterTorsoRearArmorMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 0.8
			}
		},
		{
			/* Multiplier for how 'strong' each point of center torso
	       rear armor is when looking for weak armor *for rear arc
	       influence factor*. */
			"k": "Float_CenterTorsoRearArmorMultiplierForRearArc",
			"v": {
				"type": "Float",
				"floatVal": 0.9
			}
		},
		{
			/* Multiplier for how 'strong' each point of leg armor is
	       when looking for weak armor on a legged mech. */
			"k": "Float_RemainingLegArmorMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 0.5
			}
		},
		{
			/* Percentage (0-100+) that the unit's locally evaluated
	       best target must exceed the designated target's
	       expected damage when considering opportunity fire. */
			"k": "Float_OpportunityFireExceedsDesignatedTargetByPercentage",
			"v": {
				"type": "Float",
				"floatVal": 20.0
			}
		},
		{
			/* Percentage (0-100+) that the unit's locally evaluated
	       best target must exceed the designated target's
	       firepower takeaway when considering opportunity fire. */
			"k": "Float_OpportunityFireExceedsDesignatedTargetFirepowerTakeawayByPercentage",
			"v": {
				"type": "Float",
				"floatVal": 20.0
			}
		},
		{
			/* Whether to use firepower takeaway when determining the designated target */
			"k": "Bool_TargetDesignationUsesFirepowerTakeaway",
			"v": {
				"type": "Bool",
				"boolVal": true
			}
		},
		{
			/* When predicting whether an attack will strip a pip,
	       compare the attack hit probability to this
	       threshold. Attacks with a lower probability than this
	       will not be considered to strip an evasive pip. */
			"k": "Float_PipStripAttackProbabilityThreshold",
			"v": {
				"type": "Float",
				"floatVal": 0.75
			}
		},
		{
			/* Weight for an influence factor that seeks to maximize
	     * ranged defense bonus (e.g. mineral fields). */
			"k": "Float_PreferHigherRangedDefenseBonusLocationsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.8
			}
		},
		{
			/* Weight for an influence factor that seeks to maximize
	     * ranged defense bonus (e.g. mineral fields) WHEN SPRINTING. */
			"k": "Float_SprintPreferHigherRangedDefenseBonusLocationsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.5
			}
		},
		{
			/* Multiplier applied when considering the value of a
	       downed mech when calculating the centerpoint of the
	       lance fence. 1.0 would be no special consideration, 2.0
	       would make a downed mech as important as two other
	       units. Values less than one would give the lance a
	       tendency to abandon their wounded. */
			"k": "Float_DownedMechFenceContributionMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 1.5
			}
		},
		{
			/* Percentage (0.0 - 100.0+) of my "critical hit points"
	       (weakest armor, vital structure) above which the AI
	       won't brace to get rid of instability. */
			"k": "Float_UnsteadyOverkillThreshold",
			"v": {
				"type": "Float",
				"floatVal": 65.0
			}
		},
		{
			/* Fraction (0.0 - 1.0+) of a unit's heat generated in an
	       attack to consider when filtering out movement
	       destinations. */
			"k": "Float_HeatFracForHeatFilter",
			"v": {
				"type": "Float",
				"floatVal": 0.4
			}
		},
		{
			/* Fraction (0.0 - 1.0+) of a unit's damage generated in
	       an attack to consider when filtering out movement
	       destinations. */
			"k": "Float_DamageFracForHeatFilter",
			"v": {
				"type": "Float",
				"floatVal": 0.4
			}
		},
		{
			/* Whether to use Bulwark actions*/
			"k": "Bool_UseBulwarkActions",
			"v": {
				"type": "Bool",
				"boolVal": true
			}
		},
		{
			/* how much to prefer to be in 'excluded' regions. Probably negative. */
			"k": "Float_ExcludedRegionWeight",
			"v": {
				"type": "Float",
				"floatVal": -20
			}
		},
		{
			/* how much to prefer to be in 'excluded' regions WHILE SPRINTING. Probably negative. */
			"k": "Float_SprintExcludedRegionWeight",
			"v": {
				"type": "Float",
				"floatVal": -20
			}
		},
		{
			/* Percent chance (0-100) of actually using the "Reckless" skill. */
			"k": "Float_UseRecklessSkillPercentageChance",
			"v": {
				"type": "Float",
				"floatVal": 0
			}
		},
		{
			/* Weight for how much to prefer to be exposed to enemy
	     * fire alone. Probably negative. */
			"k": "Float_AlonePreferenceWeight",
			"v": {
				"type": "Float",
				"floatVal": -0.1
			}
		},
		{
			/* Weight for how much to prefer to be exposed to enemy
	     * fire alone WHEN SPRINTING. Probably negative. */
			"k": "Float_SprintAlonePreferenceWeight",
			"v": {
				"type": "Float",
				"floatVal": -1.2
			}
		},
		{
			/* How long to tolerate being alone, in turns. */
			"k": "Int_AloneToleranceTurnCount",
			"v": {
				"type": "Int",
				"floatVal": 5
			}
		},
		{
			/* How long to cool down after being alone, in turns. */
			"k": "Int_AloneCoolDownTurnCount",
			"v": {
				"type": "Int",
				"floatVal": 2
			}
		},
		{
			/* When a buddy is exposed to enemy fire alone, apply this
	     * weight to locations that DO NOT have line of fire to
	     * hostiles. Probably negative. */
			"k": "Float_BuddyAloneFiringSolutionPreferenceWeight",
			"v": {
				"type": "Float",
				"floatVal": -0.8
			}
		},
		{
			/* When a buddy is exposed to enemy fire alone, apply this
	     * weight to locations that DO NOT have line of fire to
	     * hostiles WHEN SPRINTING. Probably negative. */
			"k": "Float_SprintBuddyAloneFiringSolutionPreferenceWeight",
			"v": {
				"type": "Float",
				"floatVal": -1.2
			}
		},
		{
			/* When a buddy is exposed to enemy fire alone, close the
	     * distance to the alone unit by applying this weight
	     * proportionately to locations radiating out from the
	     * alone unit (e.g. the alone unit's location would get
	     * 0.0, this unit's location would get 1.0 * this
	     * weight. Probably negative. */
			"k": "Float_BuddyAloneMoveNearbyPreferenceWeight",
			"v": {
				"type": "Float",
				"floatVal": -1.2
			}
		},
		{
			/* When a buddy is exposed to enemy fire alone, close the
	     * distance to the alone unit by applying this weight
	     * proportionately to locations radiating out from the
	     * alone unit (e.g. the alone unit's location would get
	     * 0.0, this unit's location would get 1.0 * this
	     * weight WHEN SPRINTING. Probably negative. */
			"k": "Float_SprintBuddyAloneMoveNearbyPreferenceWeight",
			"v": {
				"type": "Float",
				"floatVal": -0.8
			}
		},
		{
			/* Whether to allow long range pathfinding when following
	     * routes. (Defaults to True) */
			"k": "Bool_AllowLongRangePathfindingWhenPatrolling",
			"v": {
				"type": "Bool",
				"boolVal": true
			}
		},
		{
			/* Whether to use the dynamic hex-based long range
	     * pathfinding.  Currently (February 13, 2018) in test,
	     * should be more accurate and efficient than the old
	     * incline mesh pathfinding.
	     */
			"k": "Bool_UseDynamicLongRangePathfinding",
			"v": {
				"type": "Bool",
				"boolVal": true
			}
		},
		{
			/* How fast (percentage of full speed, 0% = 0, 100% = 100.0) to
             * follow patrol routes.
	     */
			"k": "Float_PatrolRouteThrottlePercentage",
			"v": {
				"type": "Float",
				"floatVal": 90.0
			}
		},
		{
			/* If we have priority targets, should we only consider priority
             * targets when evaluating the "hostile" phase of influence maps?
	     */
			"k": "Bool_FilterHostileInfluenceMapsToPriorityTargets",
			"v": {
				"type": "Bool",
				"boolVal": false
			}
		},
		{
			/* If true, drop out of long range pathfinding if we can walk to
             * a destination with LOF to a hostile. (TODO: roll this behavior out to
             * all encounters.)
	     */
			"k": "Bool_SimpleShortRangeLOF",
			"v": {
				"type": "Bool",
				"boolVal": false
			}
		},
		{
			/* If true, apply "ruthless" mood to AIs that have priority
             * targets and do not consider non-LOF destinations if destinations exist
             * that have LOF
	     */
			"k": "Bool_RuthlessPriorityTargeting",
			"v": {
				"type": "Bool",
				"boolVal": false
			}
		},
		{
			/* If true, allow AI to attack hostiles. Otherwise, only move and brace.
	     */
			"k": "Bool_AllowAttack",
			"v": {
				"type": "Bool",
				"boolVal": true
			}
		},
		{
			/* An alerted unit will act on visibility information,
	       closing, attacking. Non-alerted units will still follow
	       patrol orders or movement orders. This will be set by
	       visibility logic.
	       For internal AI use, do not set. */
			"k": "Bool_Alerted",
			"v": {
				"type": "Bool",
				"boolVal": false
			}
		},
		{
			/* For internal AI use, do not set. */
			"k": "Int_ReserveCalculationsLastDoneForRoundNumber",
			"v": {
				"type": "Int",
				"intVal": 0
			}
		},
		{
			/* For internal AI use, do not set. */
			"k": "Int_ReserveCalculationsLastDoneForPhaseNumber",
			"v": {
				"type": "Int",
				"intVal": 0
			}
		},
		{
			/* For internal AI use, do not set. */
			"k": "Int_ReserveToPhaseNumber",
			"v": {
				"type": "Int",
				"intVal": 0
			}
		},
		{
			/* For internal AI use, do not set. */
			"k": "String_GuardLanceGUID",
			"v": {
				"type": "String",
				"stringVal": ""
			}
		},
		{
			/* For internal AI use, do not set. */
			"k": "Float_GuardLanceSpeedPercent",
			"v": {
				"type": "Float",
				"floatVal": 100
			}
		},
		{
			/* For internal AI use, do not set. */
			"k": "Float_GuardLanceTetherDistance",
			"v": {
				"type": "Float",
				"floatVal": 0
			}
		},
		{
			/* For internal AI use, do not set. */
			"k": "String_StayInsideRegionGUID",
			"v": {
				"type": "String",
				"stringVal": ""
			}
		},
		{
			/* For internal AI use, do not set. */
			"k": "String_SensorLockedTargetGUID",
			"v": {
				"type": "String",
				"stringVal": ""
			}
		},
		{
			/* For internal AI use, do not set. */
			"k": "Int_LastAloneRoundNumber",
			"v": {
				"type": "Int",
				"intVal": "-1"
			}
		},
		{
			/* For internal AI use, do not set. */
			"k": "Int_LastNotAloneRoundNumber",
			"v": {
				"type": "Int",
				"intVal": "-1"
			}
		},
		{
	    /* Weight for an influence factor that seeks to stay
	       within ECM range of friendlies */
		"k" : "Float_PreferFriendlyECMFields",
		"v" : 
		{
			"type" : "Float",
			"floatVal" : 0.75
		}
	},
	{
	    /* Weight for an influence factor that seeks to stay
	       within ECM range of friendlies WHEN SPRINTING */
		"k" : "Float_SprintPreferFriendlyECMFields",
		"v" : 
		{
			"type" : "Float",
			"floatVal" : 0.0
		}
	},
	{
	    /* Weight for an influence factor that seeks to stay
	       within range of hostile ECM fields */
		"k" : "Float_PreferHostileECMFields",
		"v" : 
		{
			"type" : "Float",
			"floatVal" : 0.3
		}
	},
	{
	    /* Weight for an influence factor that seeks to stay
	       within range of hostile ECM fields WHEN SPRINTING */
		"k" : "Float_SprintPreferHostileECMFields",
		"v" : 
		{
			"type" : "Float",
			"floatVal" : 0.2
		}
	},
	{
	    /* Weight for an influence factor that seeks to stay
	       within range of hostile ECM fields to use Active Probe */
		"k" : "Float_PreferActiveProbePositions",
		"v" : 
		{
			"type" : "Float",
			"floatVal" : 0
		}
	},
	{
	    /* Weight for an influence factor that seeks to stay
	       within range of hostile ECM fields to use Active Probe */
		"k" : "Float_SprintPreferActiveProbePositions",
		"v" : 
		{
			"type" : "Float",
			"floatVal" : 0
		}
	},
	{
	    /* Number of active probe targets before we even try to activate 
	    active probe */
		"k" : "Int_MinimumActiveProbeCount",
		"v" : 
		{
			"type" : "Int",
			"IntVal" : "999"
		}
	},
	{
	    /* Minimum number of stealth pips to allow for an ECM
		ghosted mech to fire weapons */
		"k" : "Int_MinimumECMGhostedPipsToFire",
		"v" : 
		{
			"type" : "Int",
			"IntVal" : "1"
		}
	},
	{
	    /* Enables advanced navigation behaviors only in urban biomes */
		"k" : "Bool_EnableUrbanBiomeNavigation",
		"v" : 
		{
			"type" : "Bool",
			"boolVal" : true
		}
	},
	{
	    /* Enables advanced navigation behaviors on all biome types */
		"k" : "Bool_EnableUrbanBiomeNavigationEverywhere",
		"v" : 
		{
			"type" : "Bool",
			"boolVal" : true
		}
	},
	{
	    /*  Description: Float to track confidence in causing structural damage. Used to gague whether we should fire our weapon
		from a ghosted state */
		"k" : "Float_ConfidenceInSignificantDamageWhileGhostedLevel",
		"v" : 
		{
			"type" : "Float",
			"floatVal" : 0.8
		}
	},
	{
	    /* When calculatiing expected damage, how much to lerp between the damage divided by number of weapons and the damage if every hit
		was in the same location. 0 is damage divided and 1 is damage concentrated. 
		Increases with Float_GhostStateHysteresisMultiplierTurnIncrease */
		"k" : "Float_WeaponDamageSpreadLerpValue",
		"v" : 
		{
			"type" : "Float",
			"floatVal" : 0.5
		}
	},
	{
	    /*  When getting the chance in causing significant damage, how much weight to give the amount of structural damage caused. */
		"k" : "Float_StructuralDamagePercentageMultiplier",
		"v" : 
		{
			"type" : "Float",
			"floatVal" : 1.5
		}
	},
	{
	    /* When shooting in ghost state, lerp value to go from expected damage and max possible damage.
		Increases with Float_GhostStateHysteresisMultiplierTurnIncrease */
		"k" : "Float_ExpectedAndMaxDamageShootingInGhostStateLerp",
		"v" : 
		{
			"type" : "Float",
			"floatVal" : 0.6
		}
	},
	{	
	    /* For every round the ai does not shoot in ghost state, it adds to a mutiplier that increases the confidence in causing higher damage */
		"k" : "Float_GhostStateHysteresisMultiplierTurnIncrease",
		"v" : 
		{
			"type" : "Float",
			"floatVal" : 0.4
	}
	},
	{	
	    /* Enables more precise predictions about expected damage by counting weapons in range and damage reductions of the unit*/
		"k" : "Bool_ExpectedDamageAccuracyIncrease",
		"v" : 
		{
			"type" : "Bool",
			"boolVal" : true
		}
	},
	{
	    /*Enables the long-range pathfinding to be aware of actors blocking movement in nodes globally */
		"k" : "Bool_EnableLongRangePathfindingBeActorAware",
		"v" : 
		{
			"type" : "Bool",
			"boolVal" : true
		}
	},
	{
	    /* How close to the target region do we switch to short-range pathfinding */
		"k" : "Float_LongRangeToShortRangeDistanceThreshold",
		"v" : 
		{
			"type" : "Float",
			"floatVal" : 200
		}
	}
	]
}