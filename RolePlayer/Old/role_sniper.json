{
	"behaviorVariables": [
		{
			"k": "Float_SureFootingAbilityWalkBoost",
			"v": {
				"type": "Float",
				"floatVal": 0.4
			}
		},
		{
			/* The "To Hit" threshold to use when attacking preferred
	     * targets */
			"k": "Float_PreferredTargetToHitThreshold",
			"v": {
				"type": "Float",
				"floatVal": 0.25
			}
		},
		{
			/* How much accuracy (0.0 - 1.0) is required to consider
	       an attack that will overheat */
			"k": "Float_AccuracyNeededForOverheatAttack",
			"v": {
				"type": "Float",
				"floatVal": 0.65
			}
		},
		{
			/* How much a location must be damaged before an overheat
	       attack will be considered, as a fraction from 0.0
	       (undamaged) to 1.0 (location destroyed) */
			"k": "Float_ExistingTargetDamageForOverheatAttack",
			"v": {
				"type": "Float",
				"floatVal": 0.3
			}
		},
		{
			"k": "Float_PreferLowerMovementFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.0
			}
		},
		{
			"k": "Float_PreferLessTargetableLocationFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.8
			}
		},
		{
			"k": "Float_ShootingDamageMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 4.5
			}
		},
		{
			"k": "Float_MeleeDamageMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 0.1
			}
		},
		{
			/* How many phases to consider when looking for a melee
	       revenge target. */
			"k": "Int_MeleeRevengeWindowPhaseCount",
			"v": {
				"type": "Int",
				"intVal": 40
			}
		},
		{
			/* If a target is a melee revenge target, but the ratio of
	       its expected melee damage to my expected melee damage
	       is higher than this threshold, DO NOT MELEE! It'll all
	       end in tears! */
			"k": "Float_MeleeDamageRatioCap",
			"v": {
				"type": "Float",
				"floatVal": 0.1
			}
		},
		{
			/* If a target is a melee revenge target, what additional
	       damage multiplier to apply. The total multiplier is
	       Float_MeleeDamageMultiplier +
	       FloatMeleeRevengeBonus. */
			"k": "Float_MeleeRevengeBonus",
			"v": {
				"type": "Float",
				"floatVal": 0.1
			}
		},
		{
			/* Influence Factor Weight to control the desire to be
	       inside forests or other locations that grant guard. */
			"k": "Float_PreferLocationsThatGrantGuardFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.5
			}
		},
		{
			/* Influence Factor to prefer this lance to surround
	       hostile units WHEN SPRINTING.*/
			"k": "Float_SprintPreferSurroundingHostileUnitsFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.1
			}
		},
		{
			/* Fence radius (in meters) for
	     * PreferStayInsideFenceFactor. */
			"k": "Float_FenceRadius",
			"v": {
				"type": "Float",
				"floatVal": 280
			}
		},
		{
			/* Optimal distance to nearest ally. (See
	       PreferOptimalDistanceToAllyFactor.) */
			"k": "Float_OptimalAllyDistance",
			"v": {
				"type": "Float",
				"floatVal": 244.0
			}
		},
		{
			/* Appetitive Influence Factor Weight to approach ideal
	       weapon range to hostile. */
			"k": "Float_AppetitivePreferIdealWeaponRangeToHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 2.1
			}
		},
		{
			/* Appetitive Influence Factor Weight to approach ideal
	       weapon range to hostile WHEN SPRINTING. */
			"k": "Float_SprintAppetitivePreferIdealWeaponRangeToHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 1.1
			}
		},
		{
			/* Distance (in meters) that the AI wants to keep between
	       units.  Used by:
	       - PreferNoCloserThanPersonalSpaceToAlly Influence Factor
	       - Decrowding while following routes
	    */
			"k": "Float_PersonalSpaceRadius",
			"v": {
				"type": "Float",
				"floatVal": 11
			}
		},
		{
			/* How long to tolerate being alone, in turns. */
			"k": "Int_AloneToleranceTurnCount",
			"v": {
				"type": "Int",
				"floatVal": 40
			}
		},
		{
			/* How long to cool down after being alone, in turns. */
			"k": "Int_AloneCoolDownTurnCount",
			"v": {
				"type": "Int",
				"floatVal": 10
			}
		},
		{
			/* Weight for an influence factor that seeks to stay
	       within a circular fence from the centerpoint of the
	       lance WHEN SPRINTING. Note - negative logic; this
	       should use negative numbers, as it's designed to
	       discourage being outside the radius and have no effect
	       inside the fence. */
			"k": "Float_SprintPreferStayInsideFenceNegativeLogicFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -0.5
			}
		},
		{
			/* A weight for an influence factor to prefer to get
	       inside melee range. Negative values will encourage
	       units to get out of melee range. */
			"k": "Float_PreferInsideMeleeRangeFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -2.5
			}
		},
		{
			/* A weight for an influence factor to prefer to get
	       inside melee range WHEN SPRINTING. Negative values will
	       encourage units to get out of melee range. */
			"k": "Float_SprintPreferInsideMeleeRangeFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": -3.0
			}
		}
	]
}