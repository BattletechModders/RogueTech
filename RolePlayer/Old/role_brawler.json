{
	"behaviorVariables": [
		{
			/* How much accuracy (0.0 - 1.0) is required to consider
	       an attack that will overheat */
			"k": "Float_AccuracyNeededForOverheatAttack",
			"v": {
				"type": "Float",
				"floatVal": 0.65
			}
		},
		{
			/* How much a location must be damaged before an overheat
	       attack will be considered, as a fraction from 0.0
	       (undamaged) to 1.0 (location destroyed) */
			"k": "Float_ExistingTargetDamageForOverheatAttack",
			"v": {
				"type": "Float",
				"floatVal": 0.3
			}
		},
		{
			"k": "Float_MeleeDamageMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 1.3
			}
		},
		{
			"k": "Float_MeleeVsUnsteadyTargetDamageMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 2.5
			}
		},
		{
			"k": "Float_DFADamageMultiplier",
			"v": {
				"type": "Float",
				"floatVal": 4.5
			}
		},
		{
			"k": "Float_PreferInsideMeleeRangeFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 1.9
			}
		},
		{
			"k": "Float_SprintPreferInsideMeleeRangeFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 2.2
			}
		},
		{
			"k": "Float_UnsteadyCausesDefensiveMovePercentage",
			"v": {
				"type": "Float",
				"floatVal": 1
			}
		},
		{
			/* If a target is a melee revenge target, but the ratio of
	       its expected melee damage to my expected melee damage
	       is higher than this threshold, DO NOT MELEE! It'll all
	       end in tears! */
			"k": "Float_MeleeDamageRatioCap",
			"v": {
				"type": "Float",
				"floatVal": 20
			}
		},
		{
			/* How much of expected melee damage to add in again as
	       bonus damage when attacking evasive targets (0 - none,
	       1 - 100% bonus damage) */
			"k": "Float_MeleeBonusMultiplierWhenAttackingEvasiveTargets",
			"v": {
				"type": "Float",
				"floatVal": 1.0
			}
		},
		{
			/* How much of expected melee damage to add in again as
	       bonus damage when attacking braced targets (0 - none,
	       1 - 100% bonus damage) */
			"k": "Float_MeleeBonusMultiplierWhenAttackingBracedTargets",
			"v": {
				"type": "Float",
				"floatVal": 1.0
			}
		},
		{
			/* Whether to use Bulwark actions*/
			"k": "Bool_UseBulwarkActions",
			"v": {
				"type": "Bool",
				"boolVal": true
			}
		},
		{
			/* Influence Factor Weight to maximize expected damage to
	       hostiles.
	       Hostile Factor: 1.0 / 0.5 / 0.25 based on threat
	    */
			"k": "Float_PreferHigherExpectedDamageToHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 2.5
			}
		},
		{
			/* Influence Factor Weight to maximize expected damage to
	       hostiles WHEN SPRINTING.
	       Hostile Factor: 1.0 / 0.5 / 0.25 based on threat
	    */
			"k": "Float_SprintPreferHigherExpectedDamageToHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.9
			}
		},
		{
			/* Influence Factor Weight to minimize expected damage
	       from hostiles. */
			"k": "Float_PreferLowerExpectedDamageFromHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.3
			}
		},
		{
			/* Influence Factor Weight to minimize expected damage
	       from hostiles WHEN SPRINTING. */
			"k": "Float_SprintPreferLowerExpectedDamageFromHostileFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.3
			}
		},
		{
			/* Optimal distance to nearest ally. (See
	       PreferOptimalDistanceToAllyFactor.) */
			"k": "Float_OptimalAllyDistance",
			"v": {
				"type": "Float",
				"floatVal": 344.0
			}
		},
		{
			/* Influence Factor Weight to prefer locations close to
	       optimal distance to other allies. */
			"k": "Float_PreferOptimalDistanceToAllyFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.3
			}
		},
		{
			/* Influence Factor Weight to prefer locations close to
	       optimal distance to other allies WHEN SPRINTING. */
			"k": "Float_SprintPreferOptimalDistanceToAllyFactorWeight",
			"v": {
				"type": "Float",
				"floatVal": 0.1
			}
		},
		{
			/* How much heat is acceptable before being subject to "overheat" logic.
	       0: no heat
	       1: Heat level 1 (unused?)
	       2: Heat level 2
	       3: Max heat */
			"k": "Float_AcceptableHeatLevel",
			"v": {
				"type": "Float",
				"floatVal": 2.6
			}
		}
	]
}